// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// test_real
List test_real(double x);
RcppExport SEXP _autodiffr_test_real(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_real(x));
    return rcpp_result_gen;
END_RCPP
}
// test_dual
List test_dual(double x);
RcppExport SEXP _autodiffr_test_dual(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_dual(x));
    return rcpp_result_gen;
END_RCPP
}
// test_forward_derivative
List test_forward_derivative();
RcppExport SEXP _autodiffr_test_forward_derivative() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_forward_derivative());
    return rcpp_result_gen;
END_RCPP
}
// test_forward_gradient
List test_forward_gradient();
RcppExport SEXP _autodiffr_test_forward_gradient() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_forward_gradient());
    return rcpp_result_gen;
END_RCPP
}
// test_forward_derivative_multi
List test_forward_derivative_multi();
RcppExport SEXP _autodiffr_test_forward_derivative_multi() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_forward_derivative_multi());
    return rcpp_result_gen;
END_RCPP
}
// test_reverse_derivative
List test_reverse_derivative();
RcppExport SEXP _autodiffr_test_reverse_derivative() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_reverse_derivative());
    return rcpp_result_gen;
END_RCPP
}
// test_reverse_gradient
List test_reverse_gradient();
RcppExport SEXP _autodiffr_test_reverse_gradient() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_reverse_gradient());
    return rcpp_result_gen;
END_RCPP
}
// test_reverse_derivative_multi
List test_reverse_derivative_multi();
RcppExport SEXP _autodiffr_test_reverse_derivative_multi() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_reverse_derivative_multi());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_autodiffr_test_real", (DL_FUNC) &_autodiffr_test_real, 1},
    {"_autodiffr_test_dual", (DL_FUNC) &_autodiffr_test_dual, 1},
    {"_autodiffr_test_forward_derivative", (DL_FUNC) &_autodiffr_test_forward_derivative, 0},
    {"_autodiffr_test_forward_gradient", (DL_FUNC) &_autodiffr_test_forward_gradient, 0},
    {"_autodiffr_test_forward_derivative_multi", (DL_FUNC) &_autodiffr_test_forward_derivative_multi, 0},
    {"_autodiffr_test_reverse_derivative", (DL_FUNC) &_autodiffr_test_reverse_derivative, 0},
    {"_autodiffr_test_reverse_gradient", (DL_FUNC) &_autodiffr_test_reverse_gradient, 0},
    {"_autodiffr_test_reverse_derivative_multi", (DL_FUNC) &_autodiffr_test_reverse_derivative_multi, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_autodiffr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
